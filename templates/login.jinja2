{% import "/templates/shared/macros.jinja2" as macros with context %}
<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <title>login - Addicting Word Games</title>
    <meta name="description"
          content="Play login at Addicting Word Games! Only the Most Addicting Word Puzzles and Word Games! Play Addicting Online Games Free!">

    <meta name="keywords"
          content="puzzle games, addicting games, login, puzzle games, addicting word games">
    <meta property="og:title" content="login - Addicting Word Games">
    <meta property="og:url" content="{{ url }}">
    <meta property="og:image"
          content="http://www.addictingwordgames.com/img/addicting-word-games-icon200.png">

    <meta property="og:description"
          content="Play login at Addicting Word Games! Only the Most Addicting Word Puzzles and Word Games! Play Addicting Online Games Free!">
    <meta property="og:type" content="game">
    <meta property="og:site_name" content="Addicting Word Games">
    <meta property="fb:admins" content="337972272904903">


    {{ macros.headers(ws, highscores, achievements) }}

</head>
<body>
{{ macros.templates() }}
<div id="pagebody">
    {{ macros.topbar() }}


    <div class="mdl-layout mdl-js-layout">
        <main class="mdl-layout__content">
            <div class="page-content mdl-grid">
                <div class="mdl-cell mdl-cell--2-col mdl-cell--hide-tablet mdl-cell--hide-phone"></div>
                <div class="demo-content mdl-color--white mdl-shadow--4dp content mdl-color-text--grey-800 mdl-cell mdl-cell--8-col">

                    <script type="text/javascript">
                        // FirebaseUI config.
                        var uiConfig = {
                            signInSuccessUrl: '/',
                            signInOptions: [
                                // Leave the lines as is for the providers you want to offer your users.
                                {
                                    provider: firebase.auth.EmailAuthProvider.PROVIDER_ID,
                                    requireDisplayName: false
                                },

                                firebase.auth.GoogleAuthProvider.PROVIDER_ID,
                                firebase.auth.FacebookAuthProvider.PROVIDER_ID,
                            ],
                            credentialHelper: firebaseui.auth.CredentialHelper.NONE,

                            // Terms of service url.
                            tosUrl: '/terms'
                        };

                        // Initialize the FirebaseUI Widget using Firebase.
                        var ui = new firebaseui.auth.AuthUI(firebase.auth());
                        // The start method will wait until the DOM is loaded.
                        ui.start('#firebaseui-auth-container', uiConfig);
                    </script>
                    <div id="firebaseui-auth-container"></div>
                </div>
            </div>
        </main>
    </div>


</body>
</html>
